{
	"info": {
		"_postman_id": "552d1bb8-a819-4a49-a011-6969f7bfc282",
		"name": "03-25 PetStore Order Advanced",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44858941",
		"_collection_link": "https://azadyesenov.postman.co/workspace/bbf8657c-0920-42c5-87ff-0d59819775bf/collection/44858941-552d1bb8-a819-4a49-a011-6969f7bfc282?action=share&source=collection_link&creator=44858941"
	},
	"item": [
		{
			"name": "Place an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000b\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Transfer-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"});\r",
							"\r",
							"    \r",
							"pm.test(\"Keys and values are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"ID correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"PETID correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"    \r",
							"pm.test(\"QTY correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));   \r",
							"});   \r",
							"\r",
							"pm.test(\"STATUS correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});   \r",
							"\r",
							"pm.test(\"COMPLETE correct\", function () {   \r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is in correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.petId).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.quantity).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.shipDate).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.complete).to.be.a(\"boolean\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear();\r",
							"\r",
							"pm.environment.set(\"ID\", Math.floor(Math.random() * 101));\r",
							"pm.environment.set(\"PETID\", Math.floor(Math.random() * 101));\r",
							"pm.environment.set(\"QTY\", Math.floor(Math.random() * 101));\r",
							"pm.environment.set(\"SHIPDATE\", new Date());\r",
							"\r",
							"let status = [\"placed\", \"approved\", \"delivered\"];\r",
							"let randomStatus = status[Math.floor(Math.random() * status.length)];\r",
							"pm.environment.set(\"STATUS\", randomStatus);\r",
							"\r",
							"let complete = [true, false];\r",
							"let randomComplete = complete[Math.floor(Math.random() * complete.length)];\r",
							"pm.environment.set(\"COMPLETE\", randomComplete);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{ID}},\r\n  \"petId\": {{PETID}},\r\n  \"quantity\": {{QTY}},\r\n  \"shipDate\": \"{{SHIPDATE}}\",\r\n  \"status\": \"{{STATUS}}\",\r\n  \"complete\": {{COMPLETE}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000b\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Transfer-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"});\r",
							"\r",
							"    \r",
							"pm.test(\"Keys and values are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"ID correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"PETID correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"    \r",
							"pm.test(\"QTY correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));   \r",
							"});   \r",
							"\r",
							"pm.test(\"STATUS correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});   \r",
							"\r",
							"pm.test(\"COMPLETE correct\", function () {   \r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is in correct format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.petId).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.quantity).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.shipDate).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.complete).to.be.a(\"boolean\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500b\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Transfer-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has code\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has type\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct values\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(200);\r",
							"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
							"    pm.expect(pm.response.text()).to.include(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for code are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for type are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for message are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Delete response is okay\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([404, 400, 500]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm order deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is correct\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500b\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Transfer-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has code\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has type\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct values\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
							"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for code are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.be.oneOf([400, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for type are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for message are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.not.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.message).to.eql(\"Order Not Found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Double Delete response is okay\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([200, 201, 500]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is correct\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500b\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Transfer-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has code\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has type\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"    pm.expect(pm.response.text()).to.include(\"type\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct values\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(1);\r",
							"    pm.expect(pm.response.text()).to.include(\"error\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for code are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for type are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Keys and values for message are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.not.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.message).to.eql(\"Order not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Double Delete response is okay\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([200, 201, 500]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	]
}